@page "/user/edit"
@using PresentationLayer.Helpers;
@using System.Net.Http.Formatting;
@inject HttpClient Http
@inject IJWTService jwt
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<EditForm Model="@userModel">
                <InputSelect @bind-Value="Username" class="form-control">
                     <option value=" ">  </option>
                @foreach (var user in users)
                {
                    <option value="@user.Username">@user.Username</option>
                }
            </InputSelect>
            <button type="button" @onclick="Edit" data-dismiss="modal">
                        Edit
            </button>
</EditForm>
    <div class="card">
        <h4 class="card-header">Edit</h4>
        <div class="card-body">
            <EditForm Model="@u" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                 <InputSelect @bind-Value="Role" class="form-control">
                     <option value=" ">  </option>
                    <option value="User">User</option>
                    <option value="Moderator">Moderator</option>
            </InputSelect>
                <button class="btn btn-primary">
                    @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Edit
                </button>
                @if (!string.IsNullOrEmpty(error)) 
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
            </EditForm>
        </div>
    </div>
     

@code {
    private List<UserModel> users = new List<UserModel>();
    private UserModel userModel =new UserModel();
    private UserModel u =new UserModel();
    public string Username;
    public string Role;
    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<UserModel>>("Users");
    }


    public async void Edit()
    {
        u = users.Find(d => d.Username == Username);
    }

    private HttpResponseMessage response = new HttpResponseMessage();
    private string r;
    private string t;
    private bool loading;
    private string error;


    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            string s =await localStorage.GetItemAsync<string>("token");
            string bearer = jwt.GetRole(s);
            if (Http.DefaultRequestHeaders.Authorization == null)
            {
                Http.DefaultRequestHeaders.Add("Authorization", bearer);
            }
            u.UserRole = Role;
            response = await HttpService.PatchAsJsonAsync<UserModel>(Http,"https://localhost:7269/User/Edit", u);
            r = await response.Content.ReadAsStringAsync();
            navManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}
}
