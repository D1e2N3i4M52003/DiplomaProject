@page "/login"
@using System.ComponentModel.DataAnnotations
@using Business.JSONModels
@using Newtonsoft.Json;
@using PresentationLayer.Services;
@inject HttpClient Http
@inject NavigationManager navManager
@inject IAuthenticationService authService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Login</PageTitle>

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Log in</h4>
        <div class="card-body">
            <EditForm Model="@user">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="user.Email" class="form-control" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="user.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                <button class="btn btn-primary" @onclick="LogIn">
                    @if (loading) {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
                <button class="btn btn-primary" @onclick="SignUp">
                    @if (loading) {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Sign up
                </button>
                @if (!string.IsNullOrEmpty(error)) {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private AuthenticateRequest user = new AuthenticateRequest();
    private HttpResponseMessage response = new HttpResponseMessage();
    private AuthenticateResponse res= new AuthenticateResponse();
    private string r;
    private bool loading;
    private string error;
    protected override void OnInitialized()
    {
        
    }
    private async void SignUp()
    {
        navManager.NavigateTo("signup");
    }
    private async void LogIn()
    {
        loading = true;
        try
        {
            authService.Login(user);
            // authService.Login(user);

        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}
