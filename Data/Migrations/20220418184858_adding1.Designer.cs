// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220418184858_adding1")]
    partial class adding1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataLayer.Models.Destinations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf6f2ea9-6a78-4d0d-a7bf-bd00ef67e374"),
                            City = "Plovdiv",
                            Description = "In Plovdiv",
                            Name = "Ancient Theathre"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Excursion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndsOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.Property<DateTime>("StartsOnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Excursions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57ba3b75-3e64-45f6-a58e-75220c139eff"),
                            CreationDate = new DateTime(2022, 4, 18, 21, 48, 57, 690, DateTimeKind.Local).AddTicks(5556),
                            EndsOnDate = new DateTime(2022, 4, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "Plovdiv",
                            Price = 14m,
                            StartsOnDate = new DateTime(2022, 4, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Like", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("DataLayer.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ec90d27-6a1f-43b5-bbbf-c22f52d7e381"),
                            CreationDate = new DateTime(2022, 4, 18, 21, 48, 56, 968, DateTimeKind.Local).AddTicks(6047),
                            Email = "admin@gmail.com",
                            Firstname = "Ad",
                            Lastname = "min",
                            PasswordHash = "$2a$11$RWyB6Jg/7aayKoY9.MipOeYYvg9ol7Ro3RtBe5aVFooFWvtlA7Frm",
                            Role = 0,
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("DestinationsExcursion", b =>
                {
                    b.Property<Guid>("DestinationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExcursionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DestinationsId", "ExcursionsId");

                    b.HasIndex("ExcursionsId");

                    b.ToTable("DestinationsExcursion");
                });

            modelBuilder.Entity("ExcursionUser", b =>
                {
                    b.Property<Guid>("ExcursionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExcursionsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ExcursionUser");
                });

            modelBuilder.Entity("DataLayer.Models.Post", b =>
                {
                    b.HasOne("DataLayer.Models.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DestinationsExcursion", b =>
                {
                    b.HasOne("DataLayer.Models.Destinations", null)
                        .WithMany()
                        .HasForeignKey("DestinationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Excursion", null)
                        .WithMany()
                        .HasForeignKey("ExcursionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExcursionUser", b =>
                {
                    b.HasOne("DataLayer.Models.Excursion", null)
                        .WithMany()
                        .HasForeignKey("ExcursionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
